<?php

use Drupal\Core\Form\FormStateInterface;
use Drupal\Component\Plugin\Exception\PluginNotFoundException;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Link;
use Drupal\Core\Url;

/**
 * Implements hook_help().
 */
function responsive_menu_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'responsive_menu.settings':
      $readme = Link::fromTextAndUrl('README.md', Url::fromUri('base:' . drupal_get_path('module', 'responsive_menu') . '/README.md'))->toRenderable();
      return '<p>' . t('3rd party libraries are required to enable some of the features. See the @readme file for more information about where to download and place them.', array(
        '@readme' => render($readme),
        )) . '</p><p>' . t("You must also place both the 'Horizontal menu' block and the 'Responsive menu mobile icon' block in a region.") . '</p>';
  }
}

/**
 * Implements hook_theme().
 */
function responsive_menu_theme($existing, $type, $theme, $path) {
  $return = array();
  $return['responsive_menu_block_wrapper'] = array(
    'template' => 'responsive-menu-block-wrapper',
    'variables' => array('content' => array()),
    'path' => $path . '/theme',
  );

  $return['responsive_menu_block_toggle'] = array(
    'template' => 'responsive-menu-block-toggle',
    'variables' => array(),
    'path' => $path . '/theme',
  );

  $return['responsive_menu_horizontal'] = array(
    'template' => 'responsive-menu-horizontal',
    'variables' => array(
      'items' => array(),
      'menu_name' => '',
      'attributes' => array(),
    ),
    'preprocess functions' => array(
      'template_preprocess',
      'contextual_preprocess',
      'template_preprocess_horizontal',
      'responsive_menu_preprocess_horizontal',
    ),
    'path' => $path . '/theme',
  );

  return $return;
}

/**
 * Implements hook_preprocess_block().
 *
 * Removes the contextual links from the toggle icon block.
 */
function responsive_menu_preprocess_block(&$variables) {
  if ($variables['plugin_id'] == 'responsive_menu_toggle') {
    $variables['attributes']['class'][] = 'responsive-menu-toggle';
    // Remove the contextual links from this block.
    unset($variables['title_suffix']['contextual_links']);
  }
}

/**
 * Implements hook_page_bottom().
 */
function responsive_menu_page_bottom(&$page) {
  // Don't apply this for admin routes.
  if (\Drupal::service('router.admin_context')->isAdminRoute()) {
    return;
  }

  $off_canvas_menus = \Drupal::config('responsive_menu.settings')->get('off_canvas_menus');
  $menus = explode(',', $off_canvas_menus);

  $combined_tree = array();
  $menu_tree = \Drupal::menuTree();
  $parameters = $menu_tree->getCurrentRouteMenuTreeParameters(trim($menus[0]));
  $manipulators = array(
    // Show links to nodes that are accessible for the current user.
    array('callable' => 'menu.default_tree_manipulators:checkNodeAccess'),
    // Only show links that are accessible for the current user.
    array('callable' => 'menu.default_tree_manipulators:checkAccess'),
    // Use the default sorting of menu links.
    array('callable' => 'menu.default_tree_manipulators:generateIndexAndSort'),
  );
  // Force the entire tree to be build by setting expandParents to an
  // empty array.
  $parameters->expandedParents = array();
  // Iterate over the menus and merge them together.
  foreach($menus as $menu_name) {
    $tree_items = $menu_tree->load(trim($menu_name), $parameters);
    $tree_manipulated = $menu_tree->transform($tree_items, $manipulators);
    $combined_tree = array_merge($combined_tree, $tree_manipulated);
  }

  $menu = $menu_tree->build($combined_tree);

  $page['page_bottom']['off_canvas'] = array(
    '#prefix' => '<div class="off-canvas-wrapper"><div id="off-canvas">',
    '#suffix' => '</div></div>',
    '#markup' => \Drupal::service("renderer")->renderRoot($menu),
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @see \Drupal\menu_link_content\Form\MenuLinkContentForm method buildForm at /var/www/docroot/core/lib/Drupal/Core/Entity/EntityForm.php
 */
function responsive_menu_form_menu_link_content_form_alter(&$form, FormStateInterface $form_state) {
  if ($form['#menu']['menu_name'] == \Drupal::config('responsive_menu.settings')->get('responsive_menu_menu')) {
    $menu_link = $form_state->getFormObject()->getEntity();
    $menu_link_options = $menu_link->link->first()->options ?: [];
    $flyleft = isset($menu_link_options['attributes']['flyleft']) ? TRUE : FALSE;

    // Determine whether this menu item has a grandparent which means that this
    // menu item is of depth 3 or greater and therefore is able to have the
    // flyleft checkbox shown.
    $build_info = $form_state->getBuildInfo()['callback_object'];
    $menu_link_content = $build_info->getEntity();
    $parent = $menu_link_content->parent->value;
    if (!$parent) {
      return;
    }
    $parent_link = \Drupal::service('plugin.manager.menu.link')->createInstance($parent);
    $grandparent = $parent_link->getParent();
    if (!empty($grandparent)) {
      $form['flyleft'] = array(
        '#type' => 'checkbox',
        '#title' => t('Fly left'),
        '#description' => t('Whether this item (and its children) should fly left instead of right'),
        '#default_value' => $flyleft,
      );
      $form['#submit'][] = 'responsive_menu_menu_link_content_submit';
      $form['actions']['submit']['#submit'][] = 'responsive_menu_menu_link_content_submit';
    }
  }
}

/**
 * Submit handler which stores any flyleft settings.
 */
function responsive_menu_menu_link_content_submit($form, FormStateInterface $form_state) {
  // Store the flyleft as an option on the menu link entity.
  if ($form_state->getValue('flyleft')) {
    $menu_link = $form_state->getFormObject()->getEntity();
    $options = [
      'attributes' => array(
        'flyleft' => TRUE
      )
    ];
    $menu_link_options = $menu_link->link->first()->options;

    $menu_link->link->first()->options = array_merge($menu_link_options, $options);
    $menu_link->save();
  }
}

/**
 * Implements hook_preprocess_horizontal().
 */
function responsive_menu_preprocess_horizontal(&$variables) {
  foreach ($variables['items'] as &$item) {
    responsive_menu_assign_attributes_to_item($item);
  }
}

/**
 * Assigns the flyleft attribute to the menu items.
 *
 * @param $item
 *   The menu item to process.
 */
function responsive_menu_assign_attributes_to_item(&$item) {
  $item['fly_left'] = responsive_menu_get_flyleft_attribute($item['original_link']);
  if (!empty($item['below'])) {
    foreach ($item['below'] as &$item) {
      responsive_menu_assign_attributes_to_item($item);
    }
  }
}


/**
 * Determines whether the flyleft menu link attribute has been set.
 *
 * @param \Drupal\Core\Menu\MenuLinkInterface $menu_link_content_plugin
 *
 * @return bool
 *   Return a TRUE or FALSE depending on whether the flyleft class was found.
 */
function responsive_menu_get_flyleft_attribute($menu_link_content_plugin) {
  try {
    $plugin_id = $menu_link_content_plugin->getPluginId();
  }
  catch (PluginNotFoundException $e) {
    return FALSE;
  }

  if (strpos($plugin_id, ':') === FALSE) {
    return FALSE;
  }

  list($entity_type, $uuid) = explode(':', $plugin_id, 2);

  if ($entity_type == 'menu_link_content') {
    $entity = \Drupal::entityManager()->loadEntityByUuid($entity_type, $uuid);

    if ($entity) {
      $options = $entity->link->first()->options;
      $attributes = isset($options['attributes']) ? $options['attributes'] : [];

      if (isset($attributes['flyleft'])) {
        return TRUE;
      }
    }
  }

  return FALSE;
}

/**
 * Implements hook_library_info_alter().
 *
 * Modifies toolbar's library to remove BodyVisualView.js and replace it
 * with our own version which has one small modification. This allows the
 * toolbar to attach to the mm-page element instead of the body and fixes
 * any rendering issues.
 */
function responsive_menu_library_info_alter(&$libraries, $extension) {
  if ($extension == 'toolbar' && isset($libraries['toolbar']['js']['js/views/BodyVisualView.js'])) {
    unset($libraries['toolbar']['js']['js/views/BodyVisualView.js']);
    $new_path = '/' . drupal_get_path('module', 'responsive_menu') . '/js/views/BodyVisualView.js';
    $libraries['toolbar']['js'][$new_path] = array();
  }
}