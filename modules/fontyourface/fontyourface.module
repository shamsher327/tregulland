<?php

/**
 * @file
 * Provides general API for managing information about web fonts.
 */

use Drupal\Core\Entity\DatabaseStorageController;
use Drupal\Core\Entity\EntityInterface;
use Drupal\fontyourface\Entity\Font;
use Drupal\fontyourface\Entity\Provider;

/**
 * Implements hook_permission().
 */
function fontyourface_permission() {

  return array(
    'administer fonts' => array(
      'title' => t('Administer fonts'),
      'description' => t('Change which fonts are enabled and other font settings.'),
    ),
  );

} // fontyourface_permission

/**
 * Implements hook_menu().
 */
function fontyourface_menu() {

  $items = array();

  // Add 'Fonts' section just under UI.

  $items['admin/config/fontyourface'] = array(
    'title' => 'Fonts',
    'description' => 'Font management.',
    'position' => 'right',
    'weight' => -14,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access administration pages'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );

  // Add general settings form.

  $items['admin/config/fontyourface/settings'] = array(
    'title' => 'Font Settings',
    'description' => 'General font settings.',
    'access arguments' => array('administer fonts'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fontyourface_general_settings'),
    'file' => 'fontyourface.admin.inc',
  );

  return $items;

} // fontyourface_menu

/**
 * Returns the font entity matching a font ID.
 *
 * @param $fid
 *   A font's ID
 *
 * @return Drupal\fontyourface\Plugin\Core\Entity\Font|false
 *   A font entity, or FALSE if the font was not found. Results are
 *   statically cached.
 */
function fontyourface_font_load($fid) {

  if (!is_numeric($fid)) {
    return FALSE;
  } // if

  return entity_load('fontyourface_font', $fid);

} // fontyourface_font_load

/**
 * Saves a font object to the database.
 *
 * @param Drupal\fontyourface\Plugin\Core\Entity\Font $font
 *   The font entity to be saved.
 *
 * @return
 *   Status constant indicating whether font was inserted (SAVED_NEW) or updated
 *   (SAVED_UPDATED). When inserting a new font, $font->fid will contain the
 *   font ID of the newly created font.
 */
function fontyourface_font_save(Drupal\fontyourface\Plugin\Core\Entity\Font $font) {
  return $font->save();
} // fontyourface_font_save

/**
 * Generates an array which displays a font detail page.
 *
 * @param Drupal\fontyourface\Plugin\Core\Entity\Font $font
 *   A font object.
 * @param string $view_mode
 *   View mode, e.g. 'full', 'teaser'...
 *
 * @return array
 *   A $page element suitable for use by drupal_page_render().
 */
function fontyourface_font_view(Drupal\fontyourface\Plugin\Core\Entity\Font $font, $view_mode = 'full') {
  return entity_view($font, $view_mode);
} // fontyourface_font_view

/**
 * Return the font provider entity matching a provider ID.
 *
 * @param int $pid
 *   The provider's ID.
 *
 * @return Drupal\fontyourface\Plugin\Core\Entity\provider|false
 *   The font provider entity, if exists, FALSE otherwise. Results are
 *   statically cached.
 */
function fontyourface_provider_load($pid) {
  return entity_load('fontyourface_provider', $pid);
} // fontyourface_provider_load

/**
 * Loads multiple font providers based on certain conditions.
 *
 * This function should be used whenever you need to load more than one
 * provider.
 *
 * @see entity_load_multiple()
 *
 * @param array $pids
 *   (optional) An array of entity IDs. If omitted, all entities are loaded.
 *
 * @return array
 *  An array of provider objects, indexed by pid.
 */
function fontyourface_provider_load_multiple(array $pids = NULL) {
  return entity_load_multiple('fontyourface_provider', $pids);
} // fontyourface_provider_load_multiple

/**
 * Saves a provider.
 *
 * @param Drupal\fontyourface\Plugin\Core\Entity\Provider $provider
 *   The font provider entity to be saved.
 */
function fontyourface_provider_save(Drupal\fontyourface\Plugin\Core\Entity\Provider $provider) {
  return $provider->save();
} // fontyourface_provider_save

/**
 * Get names for all font providers.
 *
 * @return array
 *   A list of existing vocabulary IDs.
 */
function fontyourface_provider_get_names() {

  $names = &drupal_static(__FUNCTION__);

  if (!isset($names)) {

    $names = array();
    $config_names = config_get_storage_names_with_prefix('fontyourface.provider.');

    foreach ($config_names as $config_name) {
      $id = substr($config_name, strlen('fontyourface.provider.'));
      $names[$id] = $id;
    } // foreach

  } // if

  return $names;

} // fontyourface_provider_get_names

/**
 * Implements hook_entity_bundle_info().
 */
function fontyourface_entity_bundle_info() {

  $bundles = array();

  $provider_names = fontyourface_provider_get_names();

  foreach ($provider_names as $provider_name) {

    $config = config('fontyourface.provider.' . $provider_name);

    $bundles['fontyourface_font'][$config->get('pid')] = array(
      'label' => $config->get('name'),
      'admin' => array(
        'path' => 'admin/config/fontyourface/provider/%fontyourface_provider',
        'real path' => 'admin/config/fontyourface/provider/' . $config->get('pid'),
        'bundle argument' => 4,
      ),
    );

  } // foreach

  return $bundles;

} // fontyourface_entity_bundle_info

/**
 * Implements hook_entity_view_mode_info().
 */
function fontyourface_entity_view_mode_info() {

  $view_modes['fontyourface_font']['full'] = array(
    'label' => t('Full content'),
  );
  $view_modes['fontyourface_font']['teaser'] = array(
    'label' => t('Teaser'),
  );

  return $view_modes;

} // fontyourface_entity_view_mode_info

/**
 * Adds default fields to a provider.
 */
function fontyourface_provider_add_default_fields($pid) {

/*
  module_load_include('inc', 'fontyourface', 'fontyourface.field');

  fontyourface_provider_add_css_style_field($pid);
  fontyourface_provider_add_css_weight_field($pid);
  fontyourface_provider_add_foundry_name_field($pid);
  fontyourface_provider_add_foundry_url_field($pid);
  fontyourface_provider_add_license_name_field($pid);
  fontyourface_provider_add_license_url_field($pid);
  fontyourface_provider_add_designer_name_field($pid);
  fontyourface_provider_add_designer_url_field($pid);
*/

} // fontyourface_provider_add_default_fields
